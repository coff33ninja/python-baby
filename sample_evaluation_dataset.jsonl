{"task_id": "cg_001", "task_type": "code_generation", "prompt": "Create a Python function called 'add_numbers' that takes two numbers as input and returns their sum.", "reference_code": "def add_numbers(a, b):\n  return a + b", "reference_text": null, "unit_tests": "assert add_numbers(2, 3) == 5\nassert add_numbers(-1, 1) == 0\nassert add_numbers(0, 0) == 0", "meta": {"difficulty": "easy", "topic": "basic arithmetic"}}
{"task_id": "cg_002", "task_type": "code_generation", "prompt": "Write a Python function named 'find_max' that finds the maximum value in a list of numbers. The function should handle empty lists by returning None.", "reference_code": "def find_max(numbers):\n  if not numbers:\n    return None\n  max_val = numbers[0]\n  for num in numbers:\n    if num > max_val:\n      max_val = num\n  return max_val", "reference_text": null, "unit_tests": "assert find_max([1, 2, 3, 4, 5]) == 5\nassert find_max([-1, -5, 0]) == 0\nassert find_max([]) == None\nassert find_max([100]) == 100", "meta": {"difficulty": "medium", "topic": "list operations"}}
{"task_id": "ce_001", "task_type": "code_explanation", "prompt": "Explain what the following Python code does.", "reference_code": "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)", "reference_text": ["This code defines a recursive function called 'factorial' that calculates the factorial of a non-negative integer 'n'. The base case for the recursion is when 'n' is 0, in which case the function returns 1. Otherwise, it returns 'n' multiplied by the factorial of 'n-1'.", "The function computes n! (n factorial). It uses recursion. If n is 0, it returns 1. Otherwise, it multiplies n by factorial(n-1)."], "unit_tests": null, "meta": {"difficulty": "easy", "topic": "recursion"}}
{"task_id": "ce_002", "task_type": "code_explanation", "prompt": "Describe the purpose and functionality of this Python list comprehension.", "reference_code": "squares = [x**2 for x in range(10) if x % 2 == 0]", "reference_text": ["This list comprehension creates a list called 'squares'. It iterates through numbers from 0 to 9 (range(10)). For each number, it checks if the number is even (x % 2 == 0). If it is even, it calculates the square of the number (x**2) and adds it to the 'squares' list. The resulting list will contain squares of even numbers from 0 to 8.", "The code generates a list of squares for even numbers between 0 and 9 inclusive. It uses a list comprehension with a conditional filter."], "unit_tests": null, "meta": {"difficulty": "medium", "topic": "list comprehensions"}}
{"task_id": "dg_001", "task_type": "docstring_generation", "prompt": "Generate a concise docstring for the following Python function.", "reference_code": "def greet(name):\n    return f\"Hello, {name}!\"", "reference_text": ["  \"\"\"Greets the person passed in as a parameter.\"\"\"", "  \"\"\"Returns a greeting string for the given name.\"\"\""], "unit_tests": null, "meta": {"difficulty": "easy", "topic": "string formatting"}}
{"task_id": "dg_002", "task_type": "docstring_generation", "prompt": "Create a comprehensive docstring for this Python function, including arguments and return value.", "reference_code": "def calculate_area(length, width):\n    if not (isinstance(length, (int, float)) and isinstance(width, (int, float))):\n        raise TypeError(\"Length and width must be numeric.\")\n    if length < 0 or width < 0:\n        raise ValueError(\"Length and width must be non-negative.\")\n    return length * width", "reference_text": ["  \"\"\"Calculate the area of a rectangle.\n\n  Args:\n      length (int or float): The length of the rectangle.\n      width (int or float): The width of the rectangle.\n\n  Returns:\n      float or int: The calculated area of the rectangle.\n\n  Raises:\n      TypeError: If length or width are not numeric.\n      ValueError: If length or width are negative.\n  \"\"\""], "unit_tests": null, "meta": {"difficulty": "medium", "topic": "error handling"}}
{"task_id": "cn_001", "task_type": "concept_explanation", "prompt": "What is a Python dictionary and what are its key characteristics?", "reference_code": null, "reference_text": ["A Python dictionary is an unordered collection of data values, used to store data values like a map, which, unlike other Data Types that hold only a single value as an element, Dictionary holds key:value pair. Key characteristics include being mutable, unordered (though insertion order is preserved in Python 3.7+), and keys must be unique and immutable.", "Dictionaries are Python's implementation of hash tables or associative arrays. They store key-value pairs. Keys must be hashable and unique. Dictionaries are mutable."], "unit_tests": null, "meta": {"difficulty": "easy", "topic": "data structures"}}
{"task_id": "cn_002", "task_type": "concept_explanation", "prompt": "Explain the concept of 'scope' in Python programming.", "reference_code": null, "reference_text": ["Scope in Python refers to the region of a program where a particular namespace (a mapping from names to objects) is directly accessible. Python has different scopes: Local (inside a function), Enclosing function locals (for nested functions), Global (at the module level), and Built-in. Variables are looked up in this order (LEGB rule).", "The scope of a name is the area of a program where you can unambiguously access that name, such as variables, functions, objects, etc. Python defines scopes like local, global, enclosing, and built-in."], "unit_tests": null, "meta": {"difficulty": "medium", "topic": "namespaces and scope"}}
